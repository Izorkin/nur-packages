From 0793eb545c3802299ac65830ea4495cee1e21584 Mon Sep 17 00:00:00 2001
From: Izorkin <izorkin@elven.pw>
Date: Thu, 19 Nov 2020 16:38:33 +0300
Subject: [PATCH] fix build: revert support for OCB mode in OpenSSL

---
 ext/openssl/openssl.c              | 37 +++++----------------
 ext/openssl/tests/cipher_tests.inc | 53 +-----------------------------
 2 files changed, 10 insertions(+), 80 deletions(-)

diff --git a/ext/openssl/openssl.c b/ext/openssl/openssl.c
index 113d0c2ec4..6586349e3c 100644
--- a/ext/openssl/openssl.c
+++ b/ext/openssl/openssl.c
@@ -6874,8 +6874,6 @@ PHP_FUNCTION(openssl_digest)
 struct php_openssl_cipher_mode {
 	zend_bool is_aead;
 	zend_bool is_single_run_aead;
-	zend_bool set_tag_length_always;
-	zend_bool set_tag_length_when_encrypting;
 	int aead_get_tag_flag;
 	int aead_set_tag_flag;
 	int aead_ivlen_flag;
@@ -6883,43 +6881,27 @@ struct php_openssl_cipher_mode {
 
 static void php_openssl_load_cipher_mode(struct php_openssl_cipher_mode *mode, const EVP_CIPHER *cipher_type) /* {{{ */
 {
-	int cipher_mode = EVP_CIPHER_mode(cipher_type);
-	memset(mode, 0, sizeof(struct php_openssl_cipher_mode));
-	switch (cipher_mode) {
-#if PHP_OPENSSL_API_VERSION >= 0x10100
-		case EVP_CIPH_GCM_MODE:
-		case EVP_CIPH_OCB_MODE:
-		case EVP_CIPH_CCM_MODE:
-			mode->is_aead = 1;
-			/* For OCB mode, explicitly set the tag length even when decrypting,
-			 * see https://github.com/openssl/openssl/issues/8331. */
-			mode->set_tag_length_always = cipher_mode == EVP_CIPH_OCB_MODE;
-			mode->set_tag_length_when_encrypting = cipher_mode == EVP_CIPH_CCM_MODE;
-			mode->is_single_run_aead = cipher_mode == EVP_CIPH_CCM_MODE;
-			mode->aead_get_tag_flag = EVP_CTRL_AEAD_GET_TAG;
-			mode->aead_set_tag_flag = EVP_CTRL_AEAD_SET_TAG;
-			mode->aead_ivlen_flag = EVP_CTRL_AEAD_SET_IVLEN;
-			break;
-#else
-# ifdef EVP_CIPH_GCM_MODE
+	switch (EVP_CIPHER_mode(cipher_type)) {
+#ifdef EVP_CIPH_GCM_MODE
 		case EVP_CIPH_GCM_MODE:
 			mode->is_aead = 1;
+			mode->is_single_run_aead = 0;
 			mode->aead_get_tag_flag = EVP_CTRL_GCM_GET_TAG;
 			mode->aead_set_tag_flag = EVP_CTRL_GCM_SET_TAG;
 			mode->aead_ivlen_flag = EVP_CTRL_GCM_SET_IVLEN;
 			break;
-# endif
-# ifdef EVP_CIPH_CCM_MODE
+#endif
+#ifdef EVP_CIPH_CCM_MODE
 		case EVP_CIPH_CCM_MODE:
 			mode->is_aead = 1;
 			mode->is_single_run_aead = 1;
-			mode->set_tag_length_when_encrypting = 1;
 			mode->aead_get_tag_flag = EVP_CTRL_CCM_GET_TAG;
 			mode->aead_set_tag_flag = EVP_CTRL_CCM_SET_TAG;
 			mode->aead_ivlen_flag = EVP_CTRL_CCM_SET_IVLEN;
 			break;
-# endif
 #endif
+		default:
+			memset(mode, 0, sizeof(struct php_openssl_cipher_mode));
 	}
 }
 /* }}} */
@@ -7001,13 +6983,12 @@ static int php_openssl_cipher_init(const EVP_CIPHER *cipher_type,
 	if (php_openssl_validate_iv(piv, piv_len, max_iv_len, free_iv, cipher_ctx, mode) == FAILURE) {
 		return FAILURE;
 	}
-	if (mode->set_tag_length_always || (enc && mode->set_tag_length_when_encrypting)) {
+	if (mode->is_single_run_aead && enc) {
 		if (!EVP_CIPHER_CTX_ctrl(cipher_ctx, mode->aead_set_tag_flag, tag_len, NULL)) {
 			php_error_docref(NULL, E_WARNING, "Setting tag length for AEAD cipher failed");
 			return FAILURE;
 		}
-	}
-	if (!enc && tag && tag_len > 0) {
+	} else if (!enc && tag && tag_len > 0) {
 		if (!mode->is_aead) {
 			php_error_docref(NULL, E_WARNING, "The tag cannot be used because the cipher algorithm does not support AEAD");
 		} else if (!EVP_CIPHER_CTX_ctrl(cipher_ctx, mode->aead_set_tag_flag, tag_len, (unsigned char *) tag)) {
diff --git a/ext/openssl/tests/cipher_tests.inc b/ext/openssl/tests/cipher_tests.inc
index 1d4988c5a8..779bfa8515 100644
--- a/ext/openssl/tests/cipher_tests.inc
+++ b/ext/openssl/tests/cipher_tests.inc
@@ -108,58 +108,7 @@ $php_openssl_cipher_tests = array(
                      '01e4a9a4fba43c90ccdcb281d48c7c6f' .
                      'd62875d2aca417034c34aee5',
         ),
-    ),
-    // First few test vectors from RFC 7253.
-    'aes-128-ocb' => array(
-        array(
-            'key' => '000102030405060708090A0B0C0D0E0F',
-            'iv'  => 'BBAA99887766554433221100',
-            'aad' => '',
-            'pt'  => '',
-            'tag' => '785407BFFFC8AD9EDCC5520AC9111EE6',
-            'ct'  => '',
-        ),
-        array(
-            'key' => '000102030405060708090A0B0C0D0E0F',
-            'iv'  => 'BBAA99887766554433221101',
-            'aad' => '0001020304050607',
-            'pt'  => '0001020304050607',
-            'tag' => '5725BDA0D3B4EB3A257C9AF1F8F03009',
-            'ct'  => '6820B3657B6F615A',
-        ),
-        array(
-            'key' => '000102030405060708090A0B0C0D0E0F',
-            'iv'  => 'BBAA99887766554433221102',
-            'aad' => '0001020304050607',
-            'pt'  => '',
-            'tag' => '81017F8203F081277152FADE694A0A00',
-            'ct'  => '',
-        ),
-        array(
-            'key' => '000102030405060708090A0B0C0D0E0F',
-            'iv'  => 'BBAA99887766554433221103',
-            'aad' => '',
-            'pt'  => '0001020304050607',
-            'tag' => '14054CD1F35D82760B2CD00D2F99BFA9',
-            'ct'  => '45DD69F8F5AAE724',
-        ),
-        array(
-            'key' => '000102030405060708090A0B0C0D0E0F',
-            'iv'  => 'BBAA99887766554433221104',
-            'aad' => '000102030405060708090A0B0C0D0E0F',
-            'pt'  => '000102030405060708090A0B0C0D0E0F',
-            'tag' => '3AD7A4FF3835B8C5701C1CCEC8FC3358',
-            'ct'  => '571D535B60B277188BE5147170A9A22C',
-        ),
-        array(
-            'key' => '0F0E0D0C0B0A09080706050403020100',
-            'iv'  => 'BBAA9988776655443322110D',
-            'aad' => '000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627',
-            'pt'  => '000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627',
-            'tag' => 'D0C515F4D1CDD4FDAC4F02AA',
-            'ct'  => '1792A4E31E0755FB03E31B22116E6C2DDF9EFD6E33D536F1A0124B0A55BAE884ED93481529C76B6A',
-        ),
-    ),
+    )
 );
 
 function openssl_get_cipher_tests($method)
-- 
2.29.2

